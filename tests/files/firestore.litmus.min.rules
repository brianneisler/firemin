rules_version='2';service cloud.firestore{match/databases/{database}/documents{function has(prop,data){return data.keys().hasAll([prop])}function includes(value,list){return list.hasAll([value])}function isBoolean(value){return value is bool}function isHex(value){return isString(value)&&value.matches('^[a-z0-9]+$')}function isIndex(value){return isInteger(value)&&value>=0}function isInteger(value){return value is int}function isList(value){return value is list}function isMap(value){return value is map}function isNull(value){return value==null}function isNumber(value){return value is number}function isString(value){return value is string}function isTimestamp(value){return value is timestamp}function join(joiner,list){return list.join(joiner)}function props(properties,obj){return[obj.get(properties[0],null),obj.get(properties[1%properties.size()],null),obj.get(properties[2%properties.size()],null)][0:properties.size()]}function split(char,value){return value.split(char)}function databasePath(){return/databases/$(database)/documents}function matchesNumeric(value){return value.matches('^[0-9]+$')}function matchesUuidV4(value){return value.matches('^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$')}function currentUserIsAuthenticated(auth){return auth!=null&&auth.uid!=null;}function currentUserIsValid(auth){let user=get(/$(databasePath())/Users/$(auth.uid));return user!=null&&user.data.state=='valid';}function currentUserHasAdminRole(auth){let role=getUserRoleBefore(auth.uid);return role!=null&&role.data.role=='admin';}function currentUserHasHilRole(auth){let role=getUserRoleBefore(auth.uid);return role!=null&&role.data.role=='hil';}function userIdEqualsAuthServiceAccountId(auth,userId){let serviceAccount=get(/$(databasePath())/ServiceAccounts/$(userId));return serviceAccount!=null&&serviceAccount.id==auth.token.serviceAccountId;}function currentUserIsServiceAccount(auth){return currentUserIsAuthenticated(auth)&&auth.token!=null&&has('serviceAccountId',auth.token)&&userIdEqualsAuthServiceAccountId(auth,auth.uid)}function currentUserOwnsResource(auth,resource){return auth.uid==resource.data.userId}function pluralize(str){return{'AccessToken':'AccessTokens','Action':'Actions','ChannelContext':'ChannelContexts','Conversation':'Conversations','ConversationMember':'ConversationMembers','ConversationMessage':'ConversationMessages','EntityStats':'EntityStats','Error':'Errors','Host':'Hosts','Image':'Images','Index':'Indexes','InternalPhoneNumber':'InternalPhoneNumbers','List':'Lists','ListEntity':'ListEntities','Notification':'Notifications','NotificationSend':'NotificationSends','PhoneNumber':'PhoneNumbers','PhoneNumberClaim':'PhoneNumberClaims','Preference':'Preferences','Queue':'Queues','QueueEntity':'QueueEntities','ServiceAccount':'ServiceAccounts','SMSChallenge':'SMSChallenges','SMSChannel':'SMSChannels','SMSMessage':'SMSMessages','StatsShard':'StatsShards','Upload':'Uploads','Url':'Urls','User':'Users','UserImage':'UserImages','UserPhoneNumber':'UserPhoneNumbers','UserPreferences':'UserPreferences','UserProfile':'UserProfiles','UserProfileImage':'UserProfileImages','UserRole':'UserRoles','Variable':'Variables'}[string(str)]}function validateTimestampedData(data){return isTimestamp(data.createdAt)&&isTimestamp(data.updatedAt)&&(isTimestamp(data.removedAt)||data.removedAt==null)}function validateTimestamped(resource){return validateTimestampedData(resource.data)}function validateEntityData(data){return validateTimestampedData(data)&&((!has('removedByEntityType',data)||data.removedByEntityType==null)&&(!has('removedByEntityId',data)||data.removedByEntityId==null)&&dataIsNotRemoved(data))||(entityExistsAfter(data.removedByEntityType,data.removedByEntityId)&&dataIsRemoved(data))}function validateEntity(resource){return resource.id.matches('^[a-zA-Z0-9]{20}$')&&validateEntityData(resource.data)}function entityExistsAfter(entityType,entityId){return existsAfter(/$(databasePath())/$(pluralize(entityType))/$(entityId))}function getEntityAfter(entityType,entityId){return getAfter(/$(databasePath())/$(pluralize(entityType))/$(entityId))}function resourceExists(resource){return resource!=null }function dataIsNotRemoved(data){return data.removedAt==null}function dataIsRemoved(data){return isTimestamp(data.removedAt)}function currentUserCanReadPrivateEntity(auth,entity,userId){return((currentUserOwnsResource(auth,entity)&&dataIsNotRemoved(entity.data))||(currentUserIsAuthenticated(auth)&&auth.uid==userId)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth))}function currentUserCanReadProtectedEntity(auth,entity){return((dataIsNotRemoved(entity.data)&&resourceExists(entity))||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth))}function currentUserCanReadPublicEntity(auth,entity,allowReadRemoved){return((allowReadRemoved||dataIsNotRemoved(entity.data))||!resourceExists(entity)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth))}function currentUserCanCreateEntity(auth,entity){return((currentUserIsAuthenticated(auth)&&currentUserIsValid(auth)&&currentUserOwnsResource(auth,entity))||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}function currentUserCanUpdateEntity(auth,entity,allowRestores){return((currentUserIsAuthenticated(auth)&&currentUserIsValid(auth)&&currentUserOwnsResource(auth,entity)&&(allowRestores||dataIsNotRemoved(entity.data)))||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth))}function buildAndGetIndexAfter(entityType,fieldsKey,fieldsValue){return getAfter(/$(databasePath())/Indexes/$(/$(pluralize(entityType))/$(fieldsKey)/$(fieldsValue)))}function indexedIdMatchesAfter(entityType,fields,id){return buildAndGetIndexAfter(entityType,join('_',fields),join('_',props(fields,getEntityAfter(entityType,id).data))).data.value==id}function indexedValueMatchesAfter(entityType,fieldsKey,fieldsValue){return props(split('_',fieldsKey),getEntityAfter(entityType,buildAndGetIndexAfter(entityType,fieldsKey,fieldsValue).data.value).data)==split('_',fieldsValue)}function getAccessTokenAfter(id){return getAfter(/$(databasePath())/AccessTokens/$(id))}function validateAccessToken(accessToken){return validateEntity(accessToken)&&matchesUuidV4(accessToken.data.token)&&isBoolean(accessToken.data.valid)&&userExistsAfter(accessToken.data.userId)}function checkCreateAccessToken(auth,id){let accessToken=getAccessTokenAfter(id);return accessToken!=null&&currentUserIsServiceAccount(auth)&&validateAccessToken(accessToken);}function checkUpdateAccessToken(auth,id){let accessToken=getAccessTokenAfter(id);return accessToken!=null&&currentUserIsServiceAccount(auth)&&validateAccessToken(accessToken);}match/AccessTokens/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if checkCreateAccessToken(request.auth,id);allow update:if checkUpdateAccessToken(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}function getActionAfter(type,bucket,id){return getAfter(/$(databasePath())/Actions/$(type)/$(bucket)/$(id))}function actionExistsAfter(type,bucket,id){return existsAfter(/$(databasePath())/Actions/$(type)/$(bucket)/$(id))}function currentUserCausedActionMeta(meta,currentUserId){return meta.causedByEntityType=='User'&&meta.causedByEntityId==currentUserId}function validateStorageObjectPayload(payload){return(isString(payload.bucket)&&(!has('contentLanguage',payload)||isString(payload.contentLanguage))&&isString(payload.contentType)&&isString(payload.crc32c)&&isString(payload.etag)&&isString(payload.generation)&&isString(payload.id)&&isString(payload.kind)&&isString(payload.md5Hash)&&isString(payload.mediaLink)&&(!has('metadata',payload)||isMap(payload.metadata))&&isInteger(payload.metageneration)&&isString(payload.name)&&isString(payload.selfLink)&&isInteger(payload.size)&&isString(payload.storageClass)&&isString(payload.timeCreated)&&isString(payload.timeStorageClassUpdated)&&isString(payload.updated))}function validateStorageObjectMetadataUpdatePayload(payload){return validateStorageObjectPayload(payload)}function validateActionPayload(payload,type){return(type=='ENTITY_CHANGED'&&(isString(payload.changeType)&&(payload.data==null||isMap(payload.data))&&payload.entityPath.split('/').hasAll([pluralize(payload.entityType),payload.entityId])&&(payload.prevData==null||isMap(payload.prevData))))||(type=='auth.UserRegisteredAction'&&(isMap(payload.data)&&isString(payload.method)&&userExistsAfter(payload.userId)))||(type=='STORAGE:OBJECT_DELETE'&&validateStorageObjectPayload(payload))||(type=='STORAGE:OBJECT_FINALIZE'&&validateStorageObjectPayload(payload))||(type=='STORAGE:OBJECT_METADATA_UPDATE'&&validateStorageObjectPayload(payload))}function validateActionMeta(meta,type){return(type=='ENTITY_CHANGED'&&(meta.causedByEntityType==null&&meta.causedByEntityId==null)||entityExistsAfter(meta.causedByEntityType,meta.causedByEntityId))}function validateAction(action,type,id){return validateTimestamped(action)&&matchesUuidV4(action.id)&&isMap(action.data.action)&&action.data.action.id==id&&action.data.action.type==type&&isString(action.data.action.source)&&action.data.action.specversion=='0.3-wip'&&isString(action.data.action.time)&&isMap(action.data.action.payload)&&validateActionPayload(action.data.action.payload,type)&&(!has('meta',action.data.action)||validateActionMeta(action.data.action.meta,type))}function checkCreateQueueAction(auth,type,id){let action=getActionAfter(type,'queue',id);return(currentUserIsServiceAccount(auth)||currentUserHasAdminRole(auth)||currentUserCausedActionMeta(auth,action.data.action.meta))&&(validateAction(action,type,id)&&!actionExistsAfter(type,'processing',id)&&!actionExistsAfter(type,'resolved',id)&&!actionExistsAfter(type,'rejected',id));}match/Actions{match/{type}/queue/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if checkCreateQueueAction(request.auth,type,id)allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}match/{type}/processing/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateAction(getActionAfter(type,'processing',id),type,id)&&!actionExistsAfter(type,'queue',id)&&!actionExistsAfter(type,'resolved',id)&&!actionExistsAfter(type,'rejected',id)allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}match/{type}/resolved/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateAction(getActionAfter(type,'resolved',id),type,id)&&!actionExistsAfter(type,'queue',id)&&!actionExistsAfter(type,'processing',id)&&!actionExistsAfter(type,'rejected',id)allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}match/{type}/rejected/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateAction(getActionAfter(type,'rejected',id),type,id)&&!actionExistsAfter(type,'queue',id)&&!actionExistsAfter(type,'processing',id)&&!actionExistsAfter(type,'resolved',id)allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}}function validateChannelContext(resource){return validateEntity(resource)&&isMap(resource.data.previous)&&smsChannelExistsAfter(resource.data.channelId);}match/ChannelContexts/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateChannelContext(getAfter(/$(databasePath())/ChannelContexts/$(id)));allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}function getConversationAfter(id){return getAfter(/$(databasePath())/Conversations/$(id))}function conversationExistsAfter(id){return existsAfter(/$(databasePath())/Conversations/$(id))}function validateConversation(entity){return validateEntity(entity)&&isString(entity.data.visibility)}function checkCreateConversation(auth,id){let conversation=getConversationAfter(id);return conversation!=null&&validateConversation(conversation)&&(currentUserWillBeConversationOwner(auth,conversation)||currentUserHasHilRole(auth)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}function checkUpdateConversation(auth,id){let conversationAfter=getConversationAfter(id);let conversationBefore=get(/$(databasePath())/Conversations/$(id));return conversationAfter!=null&&conversationBefore!=null&&validateConversation(conversationAfter)&&(currentUserIsConversationOwnerOrAdmin(auth,conversationBefore)||currentUserHasHilRole(auth)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}match/Conversations/{id}{allow read:if((resource.data.visibility=='PUBLIC'&&dataIsNotRemoved(resource.data))||(currentUserIsConversationMember(request.auth,resource)&&dataIsNotRemoved(resource.data))||currentUserHasHilRole(request.auth)||currentUserHasAdminRole(request.auth)||currentUserIsServiceAccount(request.auth));allow create:if checkCreateConversation(request.auth,id);allow update:if checkUpdateConversation(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}function getConversationMemberAfter(conversationId,userId){return getAfter(/$(databasePath())/Conversations/$(conversationId)/ConversationMembers/$(userId))}function getConversationMemberBefore(conversationId,userId){return get(/$(databasePath())/Conversations/$(conversationId)/ConversationMembers/$(userId))}function currentUserIsConversationMember(auth,conversation){let conversationMemberBefore=getConversationMemberBefore(conversation.id,auth.uid);return conversationMemberBefore!=null&&!dataIsRemoved(conversationMemberBefore.data);}function currentUserIsConversationOwnerOrAdmin(auth,conversation){let conversationMemberBefore=getConversationMemberBefore(conversation.id,auth.uid);return conversationMemberBefore!=null&&!dataIsRemoved(conversationMemberBefore.data)&&includes(conversationMemberBefore.data.role,['ADMIN','OWNER']);}function currentUserWillBeConversationOwner(auth,conversation){let conversationMember=getConversationMemberAfter(conversation.id,auth.uid);return conversationMember.data.role=='OWNER';}function validateConversationMember(conversation,conversationMember){return validateEntity(conversationMember)&&conversationMember.id==conversationMember.data.userId&&conversationExistsAfter(conversationMember.data.conversationId)&&conversationMember.data.conversationId==conversation.id&&userExistsAfter(conversationMember.data.userId)&&includes(conversationMember.data.role,['ADMIN','HIL','MEMBER','OWNER'])}function checkReadConversationMember(auth,conversationId,userId,conversationMember){let conversation=getConversationAfter(conversationId);return(currentUserIsConversationMember(auth,conversation)||currentUserHasHilRole(auth)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}function checkCreateConversationMember(auth,conversationId,userId){let conversation=getConversationAfter(conversationId);let conversationMember=getConversationMemberAfter(conversationId,userId);return conversation!=null&&conversationMember!=null&&validateConversationMember(conversation,conversationMember)&&((conversation.data.visibility=='PUBLIC'&&conversationMember.data.role=='MEMBER'&&currentUserOwnsResource(auth,conversationMember))||currentUserIsConversationOwnerOrAdmin(auth,conversation)||currentUserHasHilRole(auth)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}function checkUpdateConversationMember(auth,conversationId,userId){let conversation=getConversationAfter(conversationId);let conversationMemberAfter=getConversationMemberAfter(conversationId,userId);let conversationMemberBefore=getConversationMemberBefore(conversationId,userId);return conversation!=null&&conversationMemberAfter!=null&&conversationMemberBefore!=null&&validateConversationMember(conversation,conversationMemberAfter)&&((currentUserOwnsResource(auth,conversationMemberAfter)&&currentUserOwnsResource(auth,conversationMemberBefore))||currentUserIsConversationOwnerOrAdmin(auth,conversation)||currentUserHasHilRole(auth)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}match/Conversations/{conversationId}/ConversationMembers/{userId}{allow read:if checkReadConversationMember(request.auth,conversationId,userId,resource);allow create:if checkCreateConversationMember(request.auth,conversationId,userId);allow update:if checkUpdateConversationMember(request.auth,conversationId,userId);allow delete:if currentUserIsServiceAccount(request.auth);}function getConversationMessageAfter(conversationId,messageId){return getAfter(/$(databasePath())/Conversations/$(conversationId)/ConversationMessages/$(messageId))}function validateConversationMessage(conversation,conversationMessage){return validateEntity(conversationMessage)&&conversationExistsAfter(conversationMessage.data.conversationId)&&userExistsAfter(conversationMessage.data.userId)&&conversationMessage.data.conversationId==conversation.id&&(conversationMessage.data.attachments==null||isList(conversationMessage.data.attachments))&&(conversationMessage.data.editedAt==null||isTimestamp(conversationMessage.data.editedAt))&&(conversationMessage.data.sentAt==null||isTimestamp(conversationMessage.data.sentAt))&&isString(conversationMessage.data.type)}function checkReadConversationMessage(auth,conversationId,messageId,conversationMessage){let conversation=getConversationAfter(conversationId);return((conversation.id==conversationMessage.data.conversationId&&currentUserIsConversationMember(auth,conversation))||currentUserHasHilRole(auth)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}function checkCreateConversationMessage(auth,conversationId,messageId){let conversation=getConversationAfter(conversationId);let conversationMessage=getConversationMessageAfter(conversationId,messageId);return conversation!=null&&conversationMessage!=null&&validateConversationMessage(conversation,conversationMessage)&&((currentUserIsConversationMember(auth,conversation)&&currentUserOwnsResource(auth,conversationMessage))||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}function checkUpdateConversationMessage(auth,conversationId,messageId){let conversation=getConversationAfter(conversationId);let conversationMessageAfter=getConversationMessageAfter(conversationId,messageId);let conversationMessageBefore=get(/$(databasePath())/Conversations/$(conversationId)/ConversationMessages/$(messageId));return conversation!=null&&conversationMessageAfter!=null&&conversationMessageBefore!=null&&validateConversationMessage(conversation,conversationMessageAfter)&&((currentUserOwnsResource(auth,conversationMessageAfter)&&currentUserOwnsResource(auth,conversationMessageBefore))||currentUserIsConversationOwnerOrAdmin(auth,conversation)||currentUserHasHilRole(auth)||currentUserHasAdminRole(auth)||currentUserIsServiceAccount(auth));}match/Conversations/{conversationId}/ConversationMessages/{messageId}{allow read:if checkReadConversationMessage(request.auth,conversationId,messageId,resource);allow create:if checkCreateConversationMessage(request.auth,conversationId,messageId);allow update:if checkUpdateConversationMessage(request.auth,conversationId,messageId);allow delete:if currentUserIsServiceAccount(request.auth);}function getEntityStatsAfter(id){return getAfter(/$(databasePath())/EntityStats/$(id))}function validateEntityStats(resource){return validateEntity(resource)&&isString(resource.data.entityType)&&isString(resource.data.entityId)&&isNumber(resource.data.numberShards)}match/EntityStats/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if currentUserIsServiceAccount(request.auth)&&validateEntityStats(getEntityStatsAfter(id))&&indexedIdMatchesAfter('EntityStats',['entityType','entityId'],id);allow update:if currentUserIsServiceAccount(request.auth)&&validateEntityStats(getEntityStatsAfter(id))&&indexedIdMatchesAfter('EntityStats',['entityType','entityId'],id);allow delete:if currentUserIsServiceAccount(request.auth);}match/Indexes/EntityStats/entityType_entityId/{entityType_entityId}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&indexedValueMatchesAfter('EntityStats','entityType_entityId',entityType_entityId);allow delete:if currentUserIsServiceAccount(request.auth);}function getEntityStatsShardAfter(id,index){return getAfter(/$(databasePath())/EntityStats/$(id)/StatsShards/$(index))}function validateEntityStatsShard(entity){return matchesNumeric(entity.id)&&validateEntityData(entity.data)&&isMap(entity.data.entity.data)&&isNumber(entity.data.index)}match/EntityStats/{id}/StatsShards/{index}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if currentUserIsServiceAccount(request.auth)&&validateEntityStatsShard(getEntityStatsShardAfter(id,index));allow update:if currentUserIsServiceAccount(request.auth)&&validateEntityStatsShard(getEntityStatsShardAfter(id,index));allow delete:if currentUserIsServiceAccount(request.auth);}function getErrorAfter(id){return getAfter(/$(databasePath())/Errors/$(id))}function errorExistsAfter(id){return existsAfter(/$(databasePath())/Errors/$(id))}function validateError(entity){return validateEntity(entity)&&(isString(entity.data.code)||entity.data.code==null)&&isString(entity.data.message)&&isString(entity.data.stack)&&isString(entity.data.source)}match/Errors/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateError(getErrorAfter(id));allow update:if currentUserIsServiceAccount(request.auth)&&validateError(getErrorAfter(id));allow delete:if currentUserIsServiceAccount(request.auth);}function getHostAfter(id){return getAfter(/$(databasePath())/Hosts/$(id))}function hostExistsAfter(id){return existsAfter(/$(databasePath())/Hosts/$(id))}function validateHost(entity){return validateEntity(entity)&&isString(entity.data.domain)&&(isString(entity.data.subDomain)||isNull(entity.data.subDomain))&&isString(entity.data.topLevelDomain)}match/Hosts/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateHost(getHostAfter(id));allow update:if currentUserIsServiceAccount(request.auth)&&validateHost(getHostAfter(id));allow delete:if currentUserIsServiceAccount(request.auth);}function getImageAfter(id){return getAfter(/$(databasePath())/Images/$(id))}function imageExistsAfter(id){return existsAfter(/$(databasePath())/Images/$(id))}function validateImage(resource){return validateEntity(resource)&&isString(resource.data.contentType)&&(resource.data.contentType=='image/jpg'||resource.data.contentType=='image/jpeg'||resource.data.contentType=='image/png')&&isHex(resource.data.hash)&&isNumber(resource.data.height)&&isNumber(resource.data.length)&&(isString(resource.data.path)||!has('path',resource.data))&&isString(resource.data.storageBucket)&&isNumber(resource.data.width)}match/Images/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateImage(getImageAfter(id));allow update:if currentUserIsServiceAccount(request.auth)&&validateImage(getImageAfter(id));allow delete:if currentUserIsServiceAccount(request.auth);}function internalPhoneNumberExistsAfter(phoneNumberId){return existsAfter(/$(databasePath())/InternalPhoneNumbers/$(phoneNumberId))}match/InternalPhoneNumbers/{phoneNumberId}{allow read:if currentUserCanReadProtectedEntity(request.auth,resource);allow create:if validateEntity(getAfter(/$(databasePath())/InternalPhoneNumbers/$(phoneNumberId)))&&phoneNumberExistsAfter(getAfter(/$(databasePath())/InternalPhoneNumbers/$(phoneNumberId)).data.phoneNumberId)&&getPhoneNumberAfter(getAfter(/$(databasePath())/InternalPhoneNumbers/$(phoneNumberId)).data.phoneNumberId).data.type=='internal'&&currentUserIsServiceAccount(request.auth);allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}function getListAfter(id){return getAfter(/$(databasePath())/Lists/$(id))}function validateList(resource){return validateEntity(resource)&&((isNull(resource.data.parentEntityId)&&isNull(resource.data.parentEntityType))||entityExistsAfter(resource.data.parentEntityType,resource.data.parentEntityId))}function checkCreateList(auth,id){let list=getListAfter(id);return list!=null&&validateList(list)&&currentUserIsServiceAccount(auth)}function checkUpdateList(auth,id){let list=getListAfter(id);return list!=null&&validateList(list)&&currentUserIsServiceAccount(auth)}match/Lists/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if checkCreateList(request.auth,id);allow update:if checkUpdateList(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}function getListEntityAfter(id){return getAfter(/$(databasePath())/ListEntities/$(id))}function validateListEntity(resource){return validateEntity(resource)&&existsAfter(/$(databasePath())/Lists/$(resource.data.listId))&&(isIndex(resource.data.index))&&entityExistsAfter(resource.data.entityType,resource.data.entityId)}function checkCreateListEntity(auth,id){let queueEntity=getListEntityAfter(id);return queueEntity!=null&&validateListEntity(queueEntity)&&indexedIdMatchesAfter('ListEntity',['listId','index'],id)&&currentUserIsServiceAccount(auth);}function checkUpdateListEntity(auth,id){let queueEntity=getListEntityAfter(id);return queueEntity!=null&&validateListEntity(queueEntity)&&indexedIdMatchesAfter('ListEntity',['listId','index'],id)&&currentUserIsServiceAccount(auth);}match/ListEntities/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if checkCreateListEntity(request.auth,id);allow update:if checkUpdateListEntity(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}match/Indexes/ListEntities/listId_index/{listId_index}{allow read:if true;allow create:if indexedValueMatchesAfter('ListEntity','listId_index',listId_index);allow delete:if currentUserIsServiceAccount(request.auth);}function getNotificationAfter(id){return getAfter(/$(databasePath())/Notifications/$(id))}function validateNotification(resource){return validateEntity(resource)&&userExistsAfter(resource.data.userId)&&(isTimestamp(resource.data.readAt)||isNull(resource.data.readAt))&&isString(resource.data.type)&&(isMap(resource.data.meta)||isNull(resource.data.meta))}match/Notifications/{id}{allow read:if currentUserCanReadPrivateEntity(request.auth,resource,resource.userId);allow create:if validateNotification(getNotificationAfter(id))&&currentUserIsServiceAccount(request.auth);allow update:if validateNotification(getNotificationAfter(id))&&currentUserCanUpdateEntity(request.auth,getNotificationAfter(id),false);allow delete:if currentUserIsServiceAccount(request.auth);}function getNotificationSendAfter(sendId,sendSendId){return getAfter(/$(databasePath())/Notifications/$(sendId)/NotificationSends/$(sendSendId))}function validateNotificationSend(resource,sendAfter){return validateEntity(resource)&&isMap(resource.data.channels)&&(errorExistsAfter(resource.data.errorId)||resource.data.errorId==null)&&resource.data.sendId==sendAfter.id&&(isMap(resource.data.sentAt)||resource.data.sentAt==null)&&includes(resource.data.state,['ABORTED','COMPLETED','ERROR','SENDING'])}function checkReadNotificationSend(auth,resource){return currentUserCanReadPrivateEntity(auth,resource,resource.userId)}match/Notifications/{sendId}/NotificationSends/{sendSendId}{allow read:if checkReadNotificationSend(request.auth,resource);allow create:if currentUserIsServiceAccount(request.auth)&&validateNotificationSend(getNotificationSendAfter(sendId,sendSendId),getNotificationAfter(sendId));allow update:if currentUserIsServiceAccount(request.auth)&&validateNotificationSend(getNotificationSendAfter(sendId,sendSendId),get(/$(databasePath())/Notifications/$(sendId)));allow delete:if currentUserIsServiceAccount(request.auth);}match/{somePath=**}/NotificationSends/{sendSendId}{allow read:if checkReadNotificationSend(request.auth,resource);}function getPhoneNumberAfter(id){return getAfter(/$(databasePath())/PhoneNumbers/$(id))}function phoneNumberExistsAfter(id){return existsAfter(/$(databasePath())/PhoneNumbers/$(id))}function validatePhoneNumber(resource){return validateEntity(resource)&&isHex(resource.data.hash)&&isString(resource.data.phoneNumber)&&((resource.data.type=='internal'&&internalPhoneNumberExistsAfter(resource.id))||(resource.data.type=='unclaimed'&&existsAfter(/$(databasePath())/Indexes/$(/PhoneNumberClaims/phoneNumberId/$(resource.id))))||(resource.data.type=='user'&&userPhoneNumberExistsAfter(resource.id)))}match/PhoneNumbers/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if validatePhoneNumber(getPhoneNumberAfter(id))&&indexedIdMatchesAfter('PhoneNumber',['hash'],id)&&(currentUserIsServiceAccount(request.auth)||getPhoneNumberAfter(id).data.type=='unclaimed');allow update:if validatePhoneNumber(getPhoneNumberAfter(id))&&indexedIdMatchesAfter('PhoneNumber',['hash'],id)&&currentUserIsServiceAccount(request.auth);allow delete:if currentUserIsServiceAccount(request.auth);}match/Indexes/PhoneNumbers/hash/{hash}{allow read:if true;allow create:if indexedValueMatchesAfter('PhoneNumber','hash',hash);allow delete:if currentUserIsServiceAccount(request.auth);}function getPhoneNumberClaimAfter(id){return getAfter(/$(databasePath())/PhoneNumberClaims/$(id))}match/PhoneNumberClaims/{id}{allow read:if currentUserCanReadProtectedEntity(request.auth,resource);allow create:if validateEntity(getPhoneNumberClaimAfter(id))&&userExistsAfter(getPhoneNumberClaimAfter(id).data.userId)&&phoneNumberExistsAfter(getPhoneNumberClaimAfter(id).data.phoneNumberId)&&getPhoneNumberAfter(getPhoneNumberClaimAfter(id).data.phoneNumberId).data.type=='unclaimed'&&!userPhoneNumberExistsAfter(getPhoneNumberClaimAfter(id).data.phoneNumberId)&&indexedIdMatchesAfter('PhoneNumberClaim',['phoneNumberId'],id);allow update:if currentUserIsServiceAccount(request.auth);allow delete:if currentUserIsServiceAccount(request.auth);}match/Indexes/PhoneNumberClaims/phoneNumberId/{phoneNumberId}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if indexedValueMatchesAfter('PhoneNumberClaim','phoneNumberId',phoneNumberId);allow delete:if currentUserIsServiceAccount(request.auth);}function getPreferenceAfter(id,key){return getAfter(/$(databasePath())/UserPreferences/$(id)/Preferences/$(key))}function validatePreference(entity){return entity.data.key==entity.id&&validateEntityData(entity.data)&&existsAfter(/$(databasePath())/UserPreferences/$(entity.data.userPreferencesId))&&isString(entity.data.key)&&has('value',entity.data)}function checkCreatePreference(auth,id,key){let preference=getPreferenceAfter(id,key);return preference!=null&&validatePreference(preference)&&currentUserCanCreateEntity(auth,getUserPreferencesBefore(preference.userPreferencesId))}function checkUpdatePreference(auth,id,key){let preference=getPreferenceAfter(id,key);return preference!=null&&validatePreference(preference)&&currentUserCanUpdateEntity(auth,getUserPreferencesBefore(preference.userPreferencesId),true)}match/UserPreferences/{id}/Preferences/{key}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if checkCreatePreference(request.auth,id,key);allow update:if checkUpdatePreference(request.auth,id,key);allow delete:if currentUserIsServiceAccount(request.auth);}function getQueueAfter(id){return getAfter(/$(databasePath())/Queues/$(id))}function queueExistsAfter(id){return existsAfter(/$(databasePath())/Queues/$(id))}function validateQueue(resource){return validateEntity(resource)&&((isNull(resource.data.parentEntityId)&&isNull(resource.data.parentEntityType))||entityExistsAfter(resource.data.parentEtityType,resource.data.parentEntityId)&&isIndex(resource.data.headIndex)&&isInteger(resource.data.length)&&isInteger(resource.data.tailIndex))}function checkCreateQueue(auth,id){let queue=getQueueAfter(id);return queue!=null&&validateQueue(queue)&&currentUserIsServiceAccount(auth);}function checkUpdateQueue(auth,id){let queue=getQueueAfter(id);return queue!=null&&validateQueue(queue)&&currentUserIsServiceAccount(auth);}function currentUserOwnsQueue(auth,queueId){return currentUserIsServiceAccount(auth)||currentUserHasAdminRole(auth)||(getQueueAfter(queueId).userId==auth.uid)}match/Queues/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if checkCreateQueue(request.auth,id);allow update:if checkUpdateQueue(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}function getQueueEntityAfter(id,index){return getAfter(/$(databasePath())/Queues/$(id)/QueueEntities/$(index))}function validateQueueEntity(entity){return matchesNumeric(entity.id)&&validateEntityData(entity.data)&&queueExistsAfter(entity.data.queueId)&&isInteger(entity.data.index)&&entityExistsAfter(entity.data.entityType,entity.data.entityId)}function checkCreateQueueEntity(auth,id,index){let queueEntity=getQueueEntityAfter(id,index);return queueEntity!=null&&validateQueueEntity(queueEntity)&&currentUserOwnsQueue(auth,queueEntity.queueId)}function checkUpdateQueueEntity(auth,id,index){let queueEntity=getQueueEntityAfter(id,index);return queueEntity!=null&&validateQueueEntity(queueEntity)&&currentUserOwnsQueue(auth,queueEntity.queueId)}match/Queues/{id}/QueueEntities/{index}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if checkCreateQueueEntity(request.auth,id,index);allow update:if checkUpdateQueueEntity(request.auth,id,index);allow delete:if currentUserIsServiceAccount(request.auth);}match/ServiceAccounts/{id}{allow read:if false;allow write:if false;}function validateSMSChallenge(resource){return validateEntity(resource)&&isString(resource.data.code)&&isString(resource.data.expiresIn)&&phoneNumberExistsAfter(resource.data.phoneNumberId)&&smsChannelExistsAfter(resource.data.smsChannelId)&&(isTimestamp(resource.data.usedAt)||!has('usedAt',resource.data))&&isBoolean(resource.data.valid)}match/SMSChallenges/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&validateSMSChallenge(getAfter(/$(databasePath())/SMSChallenges/$(id)));allow update:if currentUserIsServiceAccount(request.auth)&&validateSMSChallenge(resource);allow delete:if currentUserIsServiceAccount(request.auth);}function smsChannelExistsAfter(id){return existsAfter(/$(databasePath())/SMSChannels/$(id))}function validateSMSChannel(resource){return validateEntity(resource)&&internalPhoneNumberExistsAfter(resource.data.internalPhoneNumberId)&&phoneNumberExistsAfter(resource.data.userPhoneNumberId)}match/SMSChannels/{id}{allow read:if currentUserIsServiceAccount(request.auth)allow create:if currentUserIsServiceAccount(request.auth)&&validateSMSChannel(getAfter(/$(databasePath())/SMSChannels/$(id)))&&indexedIdMatchesAfter('SMSChannel',['userPhoneNumberId','internalPhoneNumberId'],id)allow update:if currentUserIsServiceAccount(request.auth)&&validateSMSChannel(resource)&&indexedIdMatchesAfter('SMSChannel',['userPhoneNumberId','internalPhoneNumberId'],id);allow delete:if currentUserIsServiceAccount(request.auth);}match/Indexes/SMSChannels/userPhoneNumberId_internalPhoneNumberId/{userPhoneNumberId_internalPhoneNumberId}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&indexedValueMatchesAfter('SMSChannel','userPhoneNumberId_internalPhoneNumberId',userPhoneNumberId_internalPhoneNumberId);allow delete:if currentUserIsServiceAccount(request.auth);}match/SMSMessages/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow write:if currentUserIsServiceAccount(request.auth);}function getUploadAfter(id){return getAfter(/$(databasePath())/Uploads/$(id))}function validateUpload(resource){return validateEntity(resource)&&userExistsAfter(resource.data.userId)&&(errorExistsAfter(resource.data.errorId)||resource.data.errorId==null)&&(isMap(resource.data.meta)||!has('meta',resource.data))&&isString(resource.data.source)&&includes(resource.data.state,['CANCELED','COMPLETED','ERROR','PAUSED','POST_PROCESSING','RUNNING','SUCCESS'])}function checkCreateUpload(auth,id){let upload=getUploadAfter(id);return upload!=null&&validateUpload(upload)&&currentUserCanCreateEntity(auth,upload)}function checkUpdateUpload(auth,id){let upload=getUploadAfter(id);return upload!=null&&currentUserIsServiceAccount(auth)&&validateUpload(upload)}match/Uploads/{id}{allow read:if currentUserCanReadPrivateEntity(request.auth,resource,resource.userId);allow create:if checkCreateUpload(request.auth,id);allow update:if checkUpdateUpload(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}function getUrlAfter(id){return getAfter(/$(databasePath())/Urls/$(id))}function validateUrl(entity){return validateEntity(entity)&&(isString(entity.data.hash)||isNull(entity.data.hash))&&hostExistsAfter(entity.data.hostId)&&isString(entity.data.pathname)&&(isNumber(entity.data.port)||isNull(entity.data.port))&&isString(entity.data.protocol)&&(isString(entity.data.search)||isNull(entity.data.search));}function checkCreateUrl(auth,id){let urlAfter=getUrlAfter(id);return currentUserIsServiceAccount(auth)&&validateUrl(urlAfter);}function checkUpdateUrl(auth,id){let urlAfter=getUrlAfter(id);return currentUserIsServiceAccount(auth)&&validateUrl(urlAfter);}match/Urls/{id}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if checkCreateUrl(request.auth,id);allow update:if checkUpdateUrl(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}function getUserAfter(id){return getAfter(/$(databasePath())/Users/$(id))}function userExistsAfter(id){return existsAfter(/$(databasePath())/Users/$(id))}match/Users/{id}{allow read:if currentUserCanReadProtectedEntity(request.auth,resource);allow create:if validateEntity(getUserAfter(id))&&(isString(getUserAfter(id).data.name)||!has('name',getUserAfter(id).data))&&isString(getUserAfter(id).data.state)&&(getUserAfter(id).data.state=='disabled'||getUserAfter(id).data.state=='pending'||getUserAfter(id).data.state=='valid')&&(currentUserIsServiceAccount(request.auth)||(getUserAfter(id).data.state=='pending'));allow update:if currentUserIsServiceAccount(request.auth)allow delete:if currentUserIsServiceAccount(request.auth);}function getUserPhoneNumberAfter(phoneNumberId){return getAfter(/$(databasePath())/UserPhoneNumbers/$(phoneNumberId))}function userPhoneNumberExistsAfter(phoneNumberId){return existsAfter(/$(databasePath())/UserPhoneNumbers/$(phoneNumberId))}match/UserPhoneNumbers/{phoneNumberId}{allow read:if currentUserCanReadProtectedEntity(request.auth,resource);allow create:if getAfter(/$(databasePath())/UserPhoneNumbers/$(phoneNumberId)).id==getUserPhoneNumberAfter(phoneNumberId).data.phoneNumberId&&userExistsAfter(getUserPhoneNumberAfter(phoneNumberId).data.userId)&&phoneNumberExistsAfter(getUserPhoneNumberAfter(phoneNumberId).data.phoneNumberId)&&getPhoneNumberAfter(getUserPhoneNumberAfter(phoneNumberId).data.phoneNumberId).data.type=='user'&&currentUserIsServiceAccount(request.auth);allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}function getUserPreferencesAfter(id){return getAfter(/$(databasePath())/UserPreferences/$(id))}function getUserPreferencesBefore(id){return get(/$(databasePath())/UserPreferences/$(id))}function validateUserPreferences(userPreferences){return validateEntity(userPreferences)&&userPreferences.id==userPreferences.data.userId&&userExistsAfter(userPreferences.data.userId);}function checkCreateUserPreferences(auth,id){let userPreferencesAfter=getUserPreferencesAfter(id);return validateUserPreferences(userPreferencesAfter)&&id==userPreferencesAfter.data.userId&&currentUserCanCreateEntity(auth,userPreferencesAfter);}function checkUpdateUserPreferences(auth,id){let userPreferencesAfter=getUserPreferencesAfter(id);let userPreferencesBefore=getUserPreferencesBefore(id);return validateUserPreferences(userPreferencesAfter)&&id==userPreferencesAfter.data.userId&&currentUserCanUpdateEntity(auth,userPreferencesBefore,false);}match/UserPreferences/{id}{allow read:if currentUserCanReadPrivateEntity(request.auth,resource,false);allow create:if checkCreateUserPreferences(request.auth,id);allow update:if checkUpdateUserPreferences(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}function getUserProfileAfter(id){return getAfter(/$(databasePath())/UserProfiles/$(id))}function validateUserProfile(userProfile){return validateEntity(userProfile)&&userProfile.id==userProfile.data.userId&&isString(userProfile.data.name)&&userExistsAfter(userProfile.data.userId)&&(!has('bio',userProfile.data)||isString(userProfile.data.bio))&&(!has('location',userProfile.data)||isString(userProfile.data.location))&&(!has('website',userProfile.data)||isString(userProfile.data.website))&&(!has('userProfileImageId',userProfile.data)||existsAfter(/$(databasePath())/UserProfileImages/$(userProfile.data.userProfileImageId)));}function checkCreateUserProfile(auth,id){let userProfileAfter=getUserProfileAfter(id);return validateUserProfile(userProfileAfter)&&id==userProfileAfter.data.userId&&currentUserCanCreateEntity(auth,userProfileAfter);}function checkUpdateUserProfile(auth,id){let userProfileAfter=getUserProfileAfter(id);let userProfileBefore=get(/$(databasePath())/UserProfiles/$(id));return validateUserProfile(userProfileAfter)&&id==userProfileAfter.data.userId&&currentUserCanUpdateEntity(auth,userProfileBefore,false);}match/UserProfiles/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if checkCreateUserProfile(request.auth,id);allow update:if checkUpdateUserProfile(request.auth,id);allow delete:if currentUserIsServiceAccount(request.auth);}match/UserProfileImages/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if currentUserIsServiceAccount(request.auth)&&validateTimestamped(getAfter(/$(databasePath())/UserProfileImages/$(id)))&&userExistsAfter(getAfter(/$(databasePath())/UserProfileImages/$(id)).data.userId)&&imageExistsAfter(getAfter(/$(databasePath())/UserProfileImages/$(id)).data.imageId)&&indexedIdMatchesAfter('UserProfileImage',['userId','imageId'],id);allow update:if false;allow delete:if currentUserIsServiceAccount(request.auth);}match/Indexes/UserProfileImages/userId_imageId/{userId_imageId}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&indexedValueMatchesAfter('UserProfileImage','userId_imageId',userId_imageId);allow delete:if currentUserIsServiceAccount(request.auth);}function getUserRoleAfter(id){return getAfter(/$(databasePath())/UserRoles/$(id))}function getUserRoleBefore(id){return exists(/$(databasePath())/UserRoles/$(id))? get(/$(databasePath())/UserRoles/$(id)):null}function validateUserRole(resource){return validateEntity(resource)&&resource.id==resource.data.userId&&userExistsAfter(resource.data.userId)&&resource.data.role=='admin' }match/UserRoles/{id}{allow read:if currentUserCanReadPrivateEntity(request.auth,resource,id)allow create:if currentUserIsServiceAccount(request.auth)&&validateUserRole(getUserRoleAfter(id));allow update:if currentUserIsServiceAccount(request.auth)&&validateUserRole(getUserRoleAfter(id));allow delete:if currentUserIsServiceAccount(request.auth);}function getVariableAfter(id){return getAfter(/$(databasePath())/Variables/$(id))}function validateVariable(resource){return validateTimestamped(resource)&&isString(resource.id)&&has('value',resource.data)}match/Variables/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if validateVariable(getVariableAfter(id))&&currentUserIsServiceAccount(request.auth);allow update:if validateVariable(getVariableAfter(id))&&currentUserIsServiceAccount(request.auth);allow delete:if currentUserIsServiceAccount(request.auth);}function getUserImageAfter(id){return getAfter(/$(databasePath())/UserImages/$(id))}function validateUserImage(resource){return validateEntity(resource)&&imageExistsAfter(resource.data.imageId)&&userExistsAfter(resource.data.userId)}match/UserImages/{id}{allow read:if currentUserCanReadPublicEntity(request.auth,resource,false);allow create:if currentUserIsServiceAccount(request.auth)&&validateUserImage(getUserImageAfter(id))&&indexedIdMatchesAfter('UserImage',['userId','imageId'],id);allow update:if currentUserIsServiceAccount(request.auth)&&validateUserImage(getUserImageAfter(id))&&indexedIdMatchesAfter('UserImage',['userId','imageId'],id);allow delete:if currentUserIsServiceAccount(request.auth);}match/Indexes/UserImages/userId_imageId/{userId_imageId}{allow read:if currentUserIsServiceAccount(request.auth);allow create:if currentUserIsServiceAccount(request.auth)&&indexedValueMatchesAfter('UserImage','userId_imageId',userId_imageId);allow delete:if currentUserIsServiceAccount(request.auth);}}}
